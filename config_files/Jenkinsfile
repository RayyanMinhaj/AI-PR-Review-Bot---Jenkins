pipeline {
    agent any

    environment{
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')
        PYTHON_PATH = "C:\\Users\\rayyan.minhaj\\AppData\\Local\\Programs\\Python\\Python312\\python.exe"
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }


    stages {             
        stage('Prepare Environment') {
            steps {
                script {

                    powershell 'gci env:\\ | ft name,value -autosize'
                    
                    powershell '& git config --add remote.origin.fetch +refs/heads/main:refs/remotes/origin/main'
                    
                    powershell '& git fetch --no-tags'
                }
            }
        }
        stage('Generate Disclaimer'){
            steps{
                script{
                    withEnv(["PR_NUMBER=${env.GITHUB_PR_NUMBER}"]){ //i found this from the gci env cmd
                        powershell "& ${env.PYTHON_PATH} config_files/disclaimer.py"
                    }  
                }
            }    
        }
        stage('Generate Change Set') {
            steps {
                script {
                    // Fetch from origin to make sure branches are up to date
                    powershell '''
                    git fetch origin
        
                    # Get the list of changed Python files between the destination and current branches
                    $changed_files = git diff --name-only origin/main...origin/$env:GITHUB_PR_SOURCE_BRANCH -- "*.py"
        
                    # Getting the code before changes
                    foreach ($file in $changed_files) {
                        "### $file - BEFORE CHANGES ###" | Out-File -Append before_changes.txt
                        git show origin/main:$file | Out-File -Append before_changes.txt
                        "`n`n" | Out-File -Append before_changes.txt
                    }
        
                    # Getting the code after changes
                    foreach ($file in $changed_files) {
                        "### $file - AFTER CHANGES ###" | Out-File -Append after_changes.txt
                        Get-Content $file | Out-File -Append after_changes.txt
                        "`n`n" | Out-File -Append after_changes.txt
                    }
                    '''
                    // Archive the generated artifacts
                    archiveArtifacts artifacts: 'before_changes.txt, after_changes.txt'
                }
            }
        }
        stage('Generate Report'){
            steps{
                script{
                    withEnv(["PR_NUMBER=${env.GITHUB_PR_NUMBER}"]){
                        powershell "& ${env.PYTHON_PATH} config_files/generate_report.py before_changes.txt after_changes.txt"          
                }
            }    
        }
    }
}
